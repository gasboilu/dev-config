스프링 클라우드
https://medium.com/@yongkyu.jang/spring-%EC%A7%84%EC%98%81%EC%9D%98-%EC%A3%BC%EC%9A%94-tech-stream-1-88cc45f1d47c

개발에 필요한 부분
과제설정 : 주제를 정하고, 시나리오 작성, db설계

서버 : node.js ,spring rest, Spring Boot(https://docs.spring.io/spring-boot/docs/current/reference/html/)
클라이언트 : 
		1> 웹(프론트엔드기술 framework 사용하는것이 추세) => VueJs,Reactive,AngularJs{javascript로 이루어져있음}
		2> 모바일(안드로이드,IOS)
		3> IOT
대용량 데이터 : spring batch설정 필요 (xml,java), 빅데이터
DB : mariadb
CLOUD 처리


스프링 5.0 : 신기술도입 (Reactive,WebFlux,Stream,Non-blocking)

스프링 클라우드 핵심요소 : 마이크로 서비스

spring data flow : 모바일장치(Android,IOS,IOT), 웨어러블, 자동차, 웹 연결


mongodb insert 시에 _class값이 들어가는부분 삭제 방법
https://everyflower.tistory.com/207

https://elfinlas.github.io/2019/02/12/mongo-class-remove/


몽구스 가이드
https://mongoosejs.com/docs/guide.html

몽구스 분리 방법
https://dev.to/rexeze/how-to-build-a-real-time-chat-app-with-nodejs-socketio-and-mongodb-2kho

등록
https://nesoy.github.io/articles/2017-04/Nodejs-MongoDB

메이븐

mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=C:\Users\13183956\.m2\repository\com\oracle\ojdbc14\10.2.0.4.0\ojdbc14-10.2.0.4.0.jar

로컬 repository
https://javacan.tistory.com/entry/%EA%B8%B0%EC%96%B5%EC%9A%A9-Maven-%EC%A4%91%EC%95%99-%EB%A6%AC%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B3%A0-Maven-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0


NEXUS 설치 및 repository 구축 방법
https://bcho.tistory.com/790
https://www.sonatype.com/


************** SPRING BATCH **************

STEP 간에 데이터 공유 프로그램 참조
https://wckhg89.github.io/archivers/springbatch1

https://wckhg89.github.io/archivers/springbatch3

- Step Processor2 추가할 차례

https://howtodoinjava.com/spring-batch/records-count-example/

- step Context : step간 데이터 공유 참고
https://dymn.tistory.com/55

1. spring batch 기능 살펴보기 예제 샘플 확인
2. 기존 OMS_BATCH에 RFC정보값 불러오는 방법 찾아보기
3. BATCH JOB 샘플 소스 만들고 JAR 파일로 만든후에  실행시켜보기
4. JAR 파일 CRON TAB 생성하기

Spring Batch Doc 페이지
https://docs.spring.io/spring-batch/trunk/reference/html/readersAndWriters.html
Mybatis : http://www.mybatis.org/spring/ko/batch.html


1. 배치처리
   - 자료찾기
     1> Job : 하나의 배치 작업을 정의하는 개념
	 2> Job Instance : 
	    1) Job의 실행에 대한 논리적인 개념
		2) JobInstance는 다수의 JobExecution을 가진다
		3) 동일한 JobParameters를 가진 JobInstance는 생성불가
	 3> Job Execution
	    1) Job Instance에 대한 한번의 실행시도를 의미
		2) JobExecution은 Job에 대한 시도 결과(Failed,Completed)를 가진다 => 실패유무가 있음
     4> Job Parameters
	    1) Job을 시작하는데 사용되는 파라미터의 집합(Map 형식)
		2) JobInstance = Job + Jobparameters
	 5> Step
	    1) 배치 작업(JOB)에 대한 순차적인 처리단계를 의미함
		2) 단순하거나 복잡(병렬,파티션,플로우 방식등)하게도 구성할수 있다
	 6> Step Execution
	    1) 한번의 Step실행 시도를 의미함
		2) Step이 실행될 때, 새로운 StepExecution이 생성된다.
	 6> Tasklet
	    1) Step에서 실행되는 작업을 의미함
		2) Chunk Oriented Processing Tasklet을 기본으로 제공
		3) Tasklet을 별도로 구현하여 사용하는 것이 가능
	 7> Chunk-Oriented Processing
		1) Data를 한번에 하나씩 읽고 처리하며 트랜잭션 범위 내에서 Chunk를 만든 후 한번에 쓰는 방식이다.
	     # Chunk단위는 트랜잭션 Commit단위
	 8> Item Reader 
	    1) Step의 처리대상이 되는 데이터를 조회하는 역할
	 9> Item Writer
	    1) Step의 처리결과를 기록(저장)하는 역할
	 10> Item Processor
	    1) Step의 ItemReader를 통해서 전달된 하나의 아이템에 대한 비즈니스로직을 처리하는 역할
	  
	 11> Job Launcher
	    1) JobParameters를 이용하여 Job을 시작함
		2) 실행 결과를 JobRepository와 실행중인 Job에서 JobExecution 정보를 제공함
		
	 12> Job Repository
	    1) Job의 실행정보(JobInstance, JobExecution, JobExecutionParams, JobExecutionContext,StepExecution, StepExecutionContext)에 
		   대한 CRUD 오퍼레이션 처리를 담당
	 13> Execution Context
	    1) Step, Job Execution 구동 중 발생하는 정보를 저장하는 컬렉션
		2) Job 재시작시에 사용되는 정보를 담는다
		3) Json 형태로 저장이 되면 최대 2500byte를 저장하므로 단순한 값만 저장한다
		
   - 처리부분 자료 찾은 후에 현재 스프링 배치처리되고있는 프로젝트(SVN)과 비교 필요
   - 우선 배치 세팅부터 한후에 처리과정 생성
   - 3가지로나눈다
     1> 읽어오기
	 2> 데이터 처리
	 3> db데이터에 넣기
	 
	 https://jojoldu.tistory.com/324
	 https://blog.woniper.net/357

